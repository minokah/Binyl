<diagram program="umletino" version="15.1"><zoom_level>7</zoom_level><help_text>Space for diagram n=t</help_text><element><id>UMLClass</id><coordinates><x>556</x><y>0</y><w>196</w><h>140</h></coordinates><panel_attributes>SpotifyWebRequest
--
- client: string
- clientID: string
- clientSecret: string
- access_token: string
- refresh_token: string
--
+ SpotifyWebRequest(code: string, access: int)
+ execute(url: string, type: int): bool
+ result(): string
+ getAccessToken(): string
+ req_GET, req_POST, req_PUT: int</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>836</x><y>686</y><w>182</w><h>133</h></coordinates><panel_attributes>FeedbackSound
--
- buffer: SoundBuffer
- playSound(buffer: SoundBuffer)
--
+ getInstance(): FeedbackSound
+ playpause_sound()
+ skipnext_sound()
+ queuemode_sound()
+ volume_sound()
+ shuffle_sound()
+ invalid_sound()
+ clear_sound()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>17</x><y>721</y><w>378</w><h>196</h></coordinates><panel_attributes>Song
--
- user: User
- id: string
- name: string
- album: string
- artist: string
- coverArt:  string
- duration: int
--
+ Song(user: User, id: string, name: string, duration: int, album: string, artist: string, coverArt: string)
+ getID(): string
+ getUser(): User
+ getName(): string
+ getAlbum(): string
+ getArtist(): string
+ getDuration(): int
+ getCoverArt(): string
+ getDuration(): int</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1123</x><y>413</y><w>203</w><h>168</h></coordinates><panel_attributes>Controls
--
- paused: boolean
- queue_mode: boolean
- volume: int
- timeLeft: int
--
+ getInstance(): Controls
+ isPause(): boolean
+ isQueueMode(): boolean
+ setPause(pause: boolean)
+ setQueueMode(mode: boolean)
+ adjustVolume(amount: int)
+ getVolume(): int
+ getTimeLeft(): int
+ setTimeLeft(time: int)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>87</x><y>322</y><w>168</w><h>126</h></coordinates><panel_attributes>Queue
--
- queue: vector&lt;Song&gt;
--
+ getInstance(): Queue
+ enqueueBack(song: Song)
+ enqueueFront(song: Song, pos: int)
+ dequeue(): Song
+ clear()
+ shuffle()
+ size(): int
+ peekNext(amount: int): vector&lt;Song&gt;
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>556</x><y>728</y><w>147</w><h>56</h></coordinates><panel_attributes>RFIDModule
--
+ getInstance(): RFIDModule
+ get(block: int): string</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1291</x><y>665</y><w>700</w><h>322</h></coordinates><panel_attributes>GUI
--
- controls: Controls
- window: RenderWindow
- cover, bckgrnd, pause_bckgrnd, next, prev, pause, play, queue, quecard, quecover: Texture
- coversprite, bckgrndsprite, pause_bckgrndsprite, nextsprite, prevsprite, pausesprite, playsprite, queuesprite, quecardsprite, quecoversprite: Sprite
- Font ChakReg, chakBold, monstFontItal, monstFontReg: Font
- black, offwhite, greywhite, opacitynone, opacityfull: Color
- artisttext, albumtext, songtext, next1text, next2text, next3text, next4text, next1usertext, next2usertext, next3usertext, next4usertext, queuesizetext, cardtitle, cardsubtitle: Text
- getInstance(): GUI
- currsong: Song
- vistimer, nexttimer, prevtimer, quecardtimer: Clock
- pausecounter, resumecounter, nextcounter, prevcounter, cardcounter: int
- truncString(string: string, numchar: int)
--
+ GUI(width: int, height: int, title: string, style: string)
+ setEmpty()
+ setCurrentSong(newsong: Song)
+ setCurrentSong(newartist: string, newsong: string, newalbum: string, coverlink: string)
+ setNextFour(next4: vector&lt;Song&gt;, queuesize: int)
+ setNext(newartist: string, newsong: string, username: string, numnext: int)
+ setNext (song: Song, numnext: int)
+ changeElement(background: Sprite, texture: Texture, filename: string)
+ setPauseScreen()
+ setPlayScreen()
+ flashNextLogo()
+ flashPrevLogo()
+ runScreen()
+ setQueueScreen()
+ removeQueueScreen()
+ flashCard(song: Song, type: string)

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>969</x><y>329</y><w>147</w><h>49</h></coordinates><panel_attributes>GraphicsDisplay
--
+ display(text: string)
+ clear()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>822</x><y>371</y><w>182</w><h>154</h></coordinates><panel_attributes>lt=&lt;-
m1=1
uses
m2=1</panel_attributes><additional_attributes>240;10;10;200</additional_attributes></element><element><id>UMLClass</id><coordinates><x>584</x><y>231</y><w>175</w><h>175</h></coordinates><panel_attributes>SpotifyService
--
- code: string
- access: int
--
+ getInstance(): SpotifyService
+ init(code: string, access: int)
+ getPlaying(): string
+ getSong(id: string): string
+ getPlaylist(id: string, offset: int): string
+ getAlbum(id: string, offset: int): string
+ setVolume(volume: int)
+ play()
+ pause()
+ skipNext()
+ skipPrevious()
+ queue(url: string)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>661</x><y>133</y><w>63</w><h>112</h></coordinates><panel_attributes>lt=&lt;-
m1=1
connects to
m2=1</panel_attributes><additional_attributes>10;10;10;140</additional_attributes></element><element><id>Relation</id><coordinates><x>822</x><y>602</y><w>483</w><h>112</h></coordinates><panel_attributes>lt=&lt;-
m1=1
uses
m2=1</panel_attributes><additional_attributes>670;140;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>157</x><y>441</y><w>91</w><h>294</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
contains
m2=0.*</panel_attributes><additional_attributes>10;10;100;400</additional_attributes></element><element><id>Relation</id><coordinates><x>745</x><y>602</y><w>119</w><h>98</h></coordinates><panel_attributes>lt=&lt;-
m1=1
plays sounds using
m2=1</panel_attributes><additional_attributes>150;120;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>346</x><y>539</y><w>147</w><h>56</h></coordinates><panel_attributes>User
--
- username: string
--
+ User(who: string)
+ getUsername() : string
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>304</x><y>588</y><w>91</w><h>147</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
stores
m2=1</panel_attributes><additional_attributes>10;190;110;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>647</x><y>476</y><w>182</w><h>133</h></coordinates><panel_attributes>Binyl
--
- control: Controls
- spotify: SpotifyService
- graphics: GraphicsDisplay
- gui: GUI
--
+ rfidReadThreadFunction(GUI *gui)
+ processSongThreadFunction(GUI *gui)
+ guiThreadFunction(GUI *gui)
+ main(argc: int, argv: char*[]): int</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>696</x><y>399</y><w>49</w><h>91</h></coordinates><panel_attributes>lt=&lt;-
m1=1
uses
m2=1</panel_attributes><additional_attributes>40;10;10;110</additional_attributes></element><element><id>Relation</id><coordinates><x>248</x><y>434</y><w>413</w><h>84</h></coordinates><panel_attributes>lt=&lt;-
m1=1
gets songs from
m2=1</panel_attributes><additional_attributes>10;10;570;90</additional_attributes></element><element><id>Relation</id><coordinates><x>640</x><y>602</y><w>105</w><h>140</h></coordinates><panel_attributes>lt=&lt;-
m1=1
gets card info from
m2=1</panel_attributes><additional_attributes>10;180;30;10</additional_attributes></element><element><id>Relation</id><coordinates><x>822</x><y>511</y><w>315</w><h>42</h></coordinates><panel_attributes>lt=&lt;&lt;-
m1=1
sets
m2=1</panel_attributes><additional_attributes>430;20;10;30</additional_attributes></element><element><id>Relation</id><coordinates><x>1256</x><y>574</y><w>189</w><h>105</h></coordinates><panel_attributes>lt=&lt;-
m1=1
looks at
m2=1</panel_attributes><additional_attributes>10;10;250;130</additional_attributes></element><element><id>Relation</id><coordinates><x>388</x><y>539</y><w>273</w><h>217</h></coordinates><panel_attributes>lt=&lt;-
m1=0.*
creates
m2=1</panel_attributes><additional_attributes>10;290;370;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1501</x><y>497</y><w>147</w><h>91</h></coordinates><panel_attributes>Curl
--
- data: struct
- url: string
--
+ execute(string url) : boolean
+ result(): void*
+ size(): size_t</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1550</x><y>581</y><w>42</w><h>98</h></coordinates><panel_attributes>lt=&lt;-
m1=1
uses
m2=1</panel_attributes><additional_attributes>30;10;10;120</additional_attributes></element><element><id>Relation</id><coordinates><x>388</x><y>840</y><w>917</w><h>42</h></coordinates><panel_attributes>lt=&lt;-
m1=0.*
reads from
m2=1</panel_attributes><additional_attributes>10;20;1290;30</additional_attributes></element><element><id>Relation</id><coordinates><x>486</x><y>518</y><w>175</w><h>49</h></coordinates><panel_attributes>lt=&lt;-
m1=0.*
creates
m2=1</panel_attributes><additional_attributes>10;50;230;10</additional_attributes></element><element><id>Relation</id><coordinates><x>248</x><y>392</y><w>427</w><h>98</h></coordinates><panel_attributes>lt=&lt;-
m1=1
add songs to
m2=1</panel_attributes><additional_attributes>10;10;590;120</additional_attributes></element></diagram>